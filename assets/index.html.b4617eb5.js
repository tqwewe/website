import{r,o as c,c as a,a as e,b as t,w as n,F as d,d as o,e as s}from"./app.79d3541f.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const _={},h=e("h1",{id:"changelog-template-reference",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#changelog-template-reference","aria-hidden":"true"},"#"),o(" Changelog template reference")],-1),g=o("For a detailed guide on how to write a template changelog refer to "),p={href:"https://tera.netlify.app/docs/#templates",target:"_blank",rel:"noopener noreferrer"},m=o("tera's documentation"),f=o("."),b=o("You can also take a look at the "),y={href:"https://github.com/cocogitto/cocogitto/tree/main/src/conventional/changelog/template",target:"_blank",rel:"noopener noreferrer"},x=o("built-in templates"),D=o(" in cocogitto repository."),N=e("h2",{id:"context",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#context","aria-hidden":"true"},"#"),o(" Context")],-1),T=e("h3",{id:"release",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#release","aria-hidden":"true"},"#"),o(" Release")],-1),k=e("p",null,[e("code",null,"commits"),o(" :")],-1),S=e("strong",null,"Type:",-1),w=o(),j=e("code",null,"Array<Commit>",-1),v=e("li",null,[e("strong",null,"Description:"),o(" commits contained in the release")],-1),C=e("li",null,[e("strong",null,"Nullable:"),o(),e("code",null,"false")],-1),R=e("p",null,[e("code",null,"version"),o(" :")],-1),q=e("strong",null,"Type:",-1),E=o(),F=e("code",null,"GitRef",-1),A=e("li",null,[e("strong",null,"Description:"),o(" tag name or/and git oid of the current release tip")],-1),V=e("li",null,[e("strong",null,"Nullable:"),o(),e("code",null,"false")],-1),L=e("p",null,[e("code",null,"from")],-1),B=e("strong",null,"Type:",-1),G=o(),H=e("code",null,"GitRef",-1),I=e("li",null,[e("strong",null,"Description:"),o(" tag name or/and git oid of the commit preceding the release")],-1),z=e("li",null,[e("strong",null,"Nullable:"),o(),e("code",null,"false")],-1),O=s("<li><p><code>date</code></p><ul><li><strong>Type:</strong> <code>Date</code></li><li><strong>Description:</strong> date of the release</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li>",1),Y=e("h3",{id:"commit",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#commit","aria-hidden":"true"},"#"),o(" Commit")],-1),J=s("<li><p><code>id</code>:</p><ul><li><strong>Type:</strong> <code>String</code>, <code>SHA-1</code></li><li><strong>Description:</strong> commit <code>SHA-1</code></li><li><strong>Nullable:</strong> <code>false</code></li></ul></li>",1),K=e("p",null,[e("code",null,"author"),o(":")],-1),M=e("li",null,[e("strong",null,"Type:"),o(),e("code",null,"String")],-1),P=e("strong",null,"Description:",-1),Q=o(" the name of the "),U=o("commit author"),W=o(" on the remote platform"),X=e("li",null,[e("strong",null,"Nullable:"),o(),e("code",null,"true")],-1),Z=e("p",null,[e("code",null,"signature"),o(":")],-1),$=e("li",null,[e("strong",null,"Type:"),o(),e("code",null,"String")],-1),ee=e("strong",null,"Description:",-1),oe=o(" the git signature of the "),te=o("commit author"),le=e("li",null,[e("strong",null,"Nullable:"),o(),e("code",null,"false")],-1),ne=s("<li><p><code>type</code>:</p><ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the conventional commit type of the commit</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li><li><p><code>date</code>:</p><ul><li><strong>Type:</strong> <code>Date</code></li><li><strong>Description:</strong> the date of the commit</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li><li><p><code>scope</code>:</p><ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the scope of the commit</li><li><strong>Nullable:</strong> <code>true</code></li></ul></li><li><p><code>summary</code>:</p><ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the conventional commit message summary</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li><li><p><code>body</code>:</p><ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the conventional commit message body</li><li><strong>Nullable:</strong> <code>true</code></li></ul></li><li><p><code>breaking_change</code>:</p><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Description:</strong> is the commit marked as a breaking change</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li>",6),se=e("p",null,[e("code",null,"footer"),o(":")],-1),ie=e("strong",null,"Type:",-1),re=o(),ce=e("code",null,"Array<Footer>",-1),ae=e("li",null,[e("strong",null,"Description:"),o(" the conventional commit footers")],-1),de=e("li",null,[e("strong",null,"Nullable:"),o(),e("code",null,"false")],-1),ue=e("h3",{id:"gitref",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#gitref","aria-hidden":"true"},"#"),o(" GitRef")],-1),_e=e("p",null,[e("code",null,"tag"),o(":")],-1),he=e("li",null,[e("strong",null,"Type:"),o(),e("code",null,"String")],-1),ge=e("strong",null,"Description:",-1),pe=o(" a SemVer tag name, with an optional "),me=e("code",null,"tag_prefix",-1),fe=o(". "),be=e("code",null,"null",-1),ye=o(" if the version is pointing to unreleased changes."),xe=e("li",null,[e("strong",null,"Nullable:"),o(),e("code",null,"true")],-1),De=s("<li><p><code>id</code>:</p><ul><li><strong>Type:</strong> <code>Sting</code>, <code>SHA-1</code></li><li><strong>Description:</strong> the id of the latest commit in the release. This can be <code>null</code> only when using <code>cog bump</code>, because it generates a changelog before creating the target version.</li><li><strong>Nullable:</strong> <code>true</code></li></ul></li>",1),Ne=s('<h3 id="footer" tabindex="-1"><a class="header-anchor" href="#footer" aria-hidden="true">#</a> Footer</h3><ul><li><code>token</code>: <ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the footer token</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li><li><code>content</code>: <ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the footer content</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li></ul><h3 id="remote" tabindex="-1"><a class="header-anchor" href="#remote" aria-hidden="true">#</a> Remote</h3>',3),Te=e("code",null,"platform",-1),ke=o(": "),Se=e("li",null,[e("strong",null,"Type:"),o(),e("code",null,"String")],-1),we=e("strong",null,"Description:",-1),je=o(" url to the configured git platform in the form "),ve=e("code",null,"https://{remote}",-1),Ce=o(" ( see: "),Re=o("Config -> Changelog -> Remote"),qe=o(")"),Ee=e("li",null,[e("strong",null,"Nullable:"),o(),e("code",null,"true")],-1),Fe=e("code",null,"owner",-1),Ae=o(": "),Ve=e("li",null,[e("strong",null,"Type:"),o(),e("code",null,"String")],-1),Le=e("strong",null,"Description:",-1),Be=o(" name of the repository owner (see: "),Ge=o("Config -> Changelog -> Owner"),He=o(")"),Ie=e("li",null,[e("strong",null,"Nullable:"),o(),e("code",null,"true")],-1),ze=e("code",null,"repository_url",-1),Oe=o(": "),Ye=e("code",null,"false",-1),Je=e("li",null,[e("strong",null,"Type:"),o(),e("code",null,"String")],-1),Ke=e("strong",null,"Description:",-1),Me=o(" url to the repository in the form "),Pe=e("code",null,"https://{remote}/{owner}/{repository}",-1),Qe=o("( see: "),Ue=o("Config -> Changelog -> repository"),We=o(")"),Xe=e("li",null,[e("strong",null,"Nullable:"),o(),e("code",null,"true")],-1),Ze=e("h2",{id:"filters",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#filters","aria-hidden":"true"},"#"),o(" Filters")],-1),$e=o("In addition to the "),eo={href:"https://tera.netlify.app/docs/#built-ins",target:"_blank",rel:"noopener noreferrer"},oo=o("tera built-in filters"),to=o(" you can use the following:"),lo=s(`<ul><li><code>unscoped</code><ul><li><strong>Description:</strong> filter unscoped commits from releases commits. Example:</li><li><strong>Example:</strong></li></ul><div class="language-tera ext-tera"><pre class="language-tera"><code>    {% <span class="hljs-meta">for </span>commit in commits | unscoped %}                                                                       
        {% <span class="hljs-number">if </span>commit.author %}                                                                                         
            {% <span class="hljs-built_in">set </span>author = <span class="hljs-string">&quot;@&quot;</span> ~ commit.author %}                                                                     
        {% <span class="hljs-number">else </span>%}                                                                                                     
            {% <span class="hljs-built_in">set </span>author = commit.signature %}                                                                        
        {% <span class="hljs-number">endif </span>%}                                                                                                    
            - <span class="hljs-keyword">{{ commit.id }}</span> - <span class="hljs-keyword">{{ commit.summary }}</span> - <span class="hljs-keyword">{{ author }}</span>
    {% <span class="hljs-meta">endfor </span>%}    
</code></pre></div></li><li><code>upper_first</code><ul><li><strong>Description:</strong> capitalize the first letter of a string</li><li><strong>Example:</strong></li></ul><div class="language-tera ext-tera"><pre class="language-tera"><code>   {% <span class="hljs-meta">for </span>type, typed_commits in commits | sort(attribute=<span class="hljs-string">&quot;type&quot;</span>)| group_by(attribute=<span class="hljs-string">&quot;type&quot;</span>) %}                           
    #### <span class="hljs-keyword">{{ type | upper_first }}</span>
   {% <span class="hljs-meta">endfor </span>%}
</code></pre></div></li></ul>`,1);function no(so,io){const i=r("ExternalLinkIcon"),l=r("RouterLink");return c(),a(d,null,[h,e("p",null,[g,e("a",p,[m,t(i)]),f]),e("p",null,[b,e("a",y,[x,t(i)]),D]),N,T,e("ul",null,[e("li",null,[k,e("ul",null,[e("li",null,[S,w,t(l,{to:"/template/#commit"},{default:n(()=>[j]),_:1})]),v,C])]),e("li",null,[R,e("ul",null,[e("li",null,[q,E,t(l,{to:"/template/#gitref"},{default:n(()=>[F]),_:1})]),A,V])]),e("li",null,[L,e("ul",null,[e("li",null,[B,G,t(l,{to:"/template/#gitref"},{default:n(()=>[H]),_:1})]),I,z])]),O]),Y,e("ul",null,[J,e("li",null,[K,e("ul",null,[M,e("li",null,[P,Q,t(l,{to:"/config/#authors"},{default:n(()=>[U]),_:1}),W]),X])]),e("li",null,[Z,e("ul",null,[$,e("li",null,[ee,oe,t(l,{to:"/config/#authors"},{default:n(()=>[te]),_:1})]),le])]),ne,e("li",null,[se,e("ul",null,[e("li",null,[ie,re,t(l,{to:"/template/#footer"},{default:n(()=>[ce]),_:1})]),ae,de])])]),ue,e("ul",null,[e("li",null,[_e,e("ul",null,[he,e("li",null,[ge,pe,t(l,{to:"/config/#tag_prefix"},{default:n(()=>[me]),_:1}),fe,be,ye]),xe])]),De]),Ne,e("ul",null,[e("li",null,[Te,ke,e("ul",null,[Se,e("li",null,[we,je,ve,Ce,t(l,{to:"/config/#remote"},{default:n(()=>[Re]),_:1}),qe]),Ee])]),e("li",null,[Fe,Ae,e("ul",null,[Ve,e("li",null,[Le,Be,t(l,{to:"/config/#owner"},{default:n(()=>[Ge]),_:1}),He]),Ie])]),e("li",null,[ze,Oe,Ye,e("ul",null,[Je,e("li",null,[Ke,Me,Pe,Qe,t(l,{to:"/config/#owner"},{default:n(()=>[Ue]),_:1}),We]),Xe])])]),Ze,e("p",null,[$e,e("a",eo,[oo,t(i)]),to]),lo],64)}var ao=u(_,[["render",no]]);export{ao as default};
