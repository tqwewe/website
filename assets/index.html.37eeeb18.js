import{r as n,o as i,c as p,a as e,b as a,w as t,F as c,e as l,d as s}from"./app.79d3541f.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const u={},d=l('<h1 id="configuration-reference" tabindex="-1"><a class="header-anchor" href="#configuration-reference" aria-hidden="true">#</a> Configuration reference</h1><p>The config reference list all value that can be set in the <code>cog.toml</code> file at the root of a repository.</p><h2 id="general" tabindex="-1"><a class="header-anchor" href="#general" aria-hidden="true">#</a> General</h2><h3 id="tag-prefix" tabindex="-1"><a class="header-anchor" href="#tag-prefix" aria-hidden="true">#</a> <code>tag_prefix</code></h3>',4),h=l(`<li><p>Type: <code>String</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: set a tag prefix value for cocogitto. For instance if you have a <code>v</code> as a tag prefix, cocogitto will generate version starting with <code>v</code> and commands like <code>cog changelog</code> will pick only those versions.</p></li><li><p>Example:</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-attr">tag_prefix</span> = <span class="hljs-string">&quot;v&quot;</span>
</code></pre></div></li>`,4),g=e("p",null,"Also see:",-1),m=s("User guide -> Tag prefix"),_=e("h3",{id:"branch-whitelist",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#branch-whitelist","aria-hidden":"true"},"#"),s(),e("code",null,"branch_whitelist")],-1),f=l(`<li><p>Type: <code>Array&lt;String&gt;</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: A list of glob patterns to allow bumping only on matching branches.</p></li><li><p>Example:</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-attr">branch_whitelist</span> = [ <span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-string">&quot;release/**&quot;</span> ]
</code></pre></div></li>`,4),b=e("p",null,"Also see:",-1),q=s("User guide -> Branch whitelist"),j=e("h3",{id:"ignore-merge-commits",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ignore-merge-commits","aria-hidden":"true"},"#"),s(),e("code",null,"ignore_merge_commits")],-1),k=l(`<li><p>Type: <code>boolean</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Default: <code>false</code></p></li><li><p>Description: whether to ignore or to lint merge commits.</p></li><li><p>Example:</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-attr">ignore_merge_commits</span> = <span class="hljs-literal">true</span>
</code></pre></div></li>`,5),x=e("p",null,"Also see:",-1),v=s("User guide -> Deal with merge commit"),y=e("h3",{id:"commit-types",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#commit-types","aria-hidden":"true"},"#"),s(),e("code",null,"commit_types")],-1),U=l(`<li><p>Type: <code>Hashmap&lt;String, ChangelogTitle&gt;</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: extend the allowed commit types, creating a new <code>cog commit</code> command and allowing to generate changelog entries for the given type.</p></li><li><p>Example:</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-section">[commit_types]</span>
<span class="hljs-attr">hotfix</span> = { changelog_title = <span class="hljs-string">&quot;Hotfixes&quot;</span> }
<span class="hljs-attr">release</span> = { changelog_title = <span class="hljs-string">&quot;Releases&quot;</span> }
</code></pre></div></li>`,4),w=e("p",null,"Also see:",-1),A=s("User guide -> Custom commit types"),D=e("h2",{id:"bump-config",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#bump-config","aria-hidden":"true"},"#"),s(" Bump config")],-1),T=e("h3",{id:"pre-bump-hooks",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pre-bump-hooks","aria-hidden":"true"},"#"),s(),e("code",null,"pre_bump_hooks")],-1),S=l(`<li><p>Type: <code>Array&lt;String&gt;</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: an array of command to execute before a version bump.</p></li><li><p>Example:</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-attr">pre_bump_hooks</span> = [
    <span class="hljs-string">&quot;sh -c \\&quot;./ci/check_branch.sh\\&quot;&quot;</span>,
    <span class="hljs-string">&quot;cargo test -- --test-threads 1&quot;</span>,
    <span class="hljs-string">&quot;cargo clippy&quot;</span>,
    <span class="hljs-string">&quot;cargo build --release&quot;</span>,
    <span class="hljs-string">&quot;cargo fmt --all&quot;</span>,
    <span class="hljs-string">&quot;cargo bump {{version}}&quot;</span>,
]
</code></pre></div></li>`,4),E=e("p",null,"Also see:",-1),O=s("User guide -> Automatic Versioning"),C=s("User guide -> Pre-bump hooks"),L=s("User guide -> Version DSL"),V=e("h3",{id:"post-bump-hooks",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#post-bump-hooks","aria-hidden":"true"},"#"),s(),e("code",null,"post_bump_hooks")],-1),B=l(`<li><p>Type: <code>Array&lt;String&gt;</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: an array of command to execute after a version bump.</p></li><li><p>Example:</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-attr">post_bump_hooks</span> = [
    <span class="hljs-string">&quot;git push&quot;</span>,
    <span class="hljs-string">&quot;git push origin {{version}}&quot;</span>,
    <span class="hljs-string">&quot;cargo package&quot;</span>,
    <span class="hljs-string">&quot;cargo publish&quot;</span>
]
</code></pre></div></li>`,4),P=e("p",null,"Also see:",-1),N=s("User guide -> Automatic Versioning"),H=s("User guide -> Post-bump hooks"),M=s("User guide -> Version DSL"),F=e("h3",{id:"bump-profiles",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#bump-profiles","aria-hidden":"true"},"#"),s(),e("code",null,"bump_profiles")],-1),G=e("li",null,[e("p",null,[s("Type: "),e("code",null,"Hashmap<String, BumpProfile>")])],-1),R=e("li",null,[e("p",null,[s("Optional: "),e("code",null,"true")])],-1),z=s("Description: add additional "),J=s("pre-bump"),I=s(" and "),K=s("post-bump"),Q=s(" hooks profile. a profile can be used with the "),W=e("code",null,"cog bump --hook-profile <profile_name>",-1),X=s(" flag."),Y=l(`<li><p>Example:</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-section">[bump_profiles.hotfix]</span>
<span class="hljs-attr">pre_bump_hooks</span> = [
    <span class="hljs-string">&quot;cargo build --release&quot;</span>,
    <span class="hljs-string">&quot;cargo fmt --all&quot;</span>,
    <span class="hljs-string">&quot;cargo bump {{version}}&quot;</span>,
]

<span class="hljs-attr">post_bump_hooks</span> = [
    <span class="hljs-string">&quot;cargo package&quot;</span>,
    <span class="hljs-string">&quot;cargo publish&quot;</span>
]
</code></pre></div></li>`,1),Z=e("p",null,"Also see:",-1),$=s("User guide -> Automatic Versioning"),ee=s("User guide -> Post-bump hooks"),se=s("User guide -> Pre-bump hooks"),oe=s("User guide -> Version DSL"),ae=s("User guide -> Bump profiles"),te=e("h2",{id:"changelog",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#changelog","aria-hidden":"true"},"#"),s(" Changelog")],-1),le=e("h3",{id:"path",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#path","aria-hidden":"true"},"#"),s(),e("code",null,"path")],-1),ne=l(`<li><p>Type: <code>String</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Default value: <code>&quot;CHANGELOG.md&quot;</code></p></li><li><p>Description: path the repository markdown changelog.</p></li><li><p>Example:</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-section">[changelog]</span>
<span class="hljs-attr">path</span> = <span class="hljs-string">&quot;my_changelog.md&quot;</span>
</code></pre></div></li>`,5),ie=e("p",null,"Also see:",-1),pe=s("User guide -> Automatic Versioning"),ce=s("User guide -> Changelog"),re=e("h3",{id:"template",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#template","aria-hidden":"true"},"#"),s(),e("code",null,"template")],-1),ue=l(`<li><p>Type: <code>String</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Default value: <code>&quot;default&quot;</code></p></li><li><p>Description: name of the builtin template to use for changelog generation or path to a custom template. Note that <code>remote</code>, <code>repository</code> and <code>owner</code> are mandatory if the &quot;remote&quot; built-in template us used or if your custom template make use of those variables.</p></li><li><p>Built-in templates : <code>default</code>, <code>remote</code>, <code>full_hash</code></p></li><li><p>Example:</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-section">[changelog]</span>
<span class="hljs-attr">template</span> = <span class="hljs-string">&quot;full_hash&quot;</span>
</code></pre></div></li>`,6),de=e("p",null,"Also see:",-1),he=s("User guide -> Changelog"),ge=s("User guide -> Built-in templates"),me=s("User guide -> Custom templates"),_e=e("h3",{id:"remote",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#remote","aria-hidden":"true"},"#"),s(),e("code",null,"remote")],-1),fe=l(`<li><p>Type: <code>String</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: domain name of the git platform hosting the repository, used for Markdown link generation in changelogs. when provided <code>repository</code> and <code>owner</code> are also required.</p></li><li><p>Example:</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-section">[changelog]</span>
<span class="hljs-attr">template</span> = <span class="hljs-string">&quot;remote&quot;</span>
<span class="hljs-attr">remote</span> = <span class="hljs-string">&quot;github.com&quot;</span>
<span class="hljs-attr">repository</span> = <span class="hljs-string">&quot;cocogitto&quot;</span>
<span class="hljs-attr">owner</span> = <span class="hljs-string">&quot;cocogitto&quot;</span>
</code></pre></div></li>`,4),be=e("p",null,"Also see:",-1),qe=s("User guide -> Changelog"),je=s("User guide -> Built-in templates"),ke=s("User guide -> Custom templates"),xe=e("h3",{id:"repository",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#repository","aria-hidden":"true"},"#"),s(),e("code",null,"repository")],-1),ve=l(`<li><p>Type: <code>String</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: name of the repository on the remote git platform.</p></li><li><p>Example:</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-section">[changelog]</span>
<span class="hljs-attr">template</span> = <span class="hljs-string">&quot;remote&quot;</span>
<span class="hljs-attr">remote</span> = <span class="hljs-string">&quot;github.com&quot;</span>
<span class="hljs-attr">repository</span> = <span class="hljs-string">&quot;cocogitto&quot;</span>
<span class="hljs-attr">owner</span> = <span class="hljs-string">&quot;cocogitto&quot;</span>
</code></pre></div></li>`,4),ye=e("p",null,"Also see:",-1),Ue=s("User guide -> Changelog"),we=s("User guide -> Built-in templates"),Ae=s("User guide -> Custom templates"),De=e("h3",{id:"owner",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#owner","aria-hidden":"true"},"#"),s(),e("code",null,"owner")],-1),Te=l(`<li><p>Type: <code>String</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: owner of the repository on the remote git platform.</p></li><li><p>Example:</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-section">[changelog]</span>
<span class="hljs-attr">template</span> = <span class="hljs-string">&quot;remote&quot;</span>
<span class="hljs-attr">remote</span> = <span class="hljs-string">&quot;github.com&quot;</span>
<span class="hljs-attr">repository</span> = <span class="hljs-string">&quot;cocogitto&quot;</span>
<span class="hljs-attr">owner</span> = <span class="hljs-string">&quot;cocogitto&quot;</span>
</code></pre></div></li>`,4),Se=e("p",null,"Also see:",-1),Ee=s("User guide -> Changelog"),Oe=s("User guide -> Built-in templates"),Ce=s("User guide -> Custom templates"),Le=e("h3",{id:"authors",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#authors","aria-hidden":"true"},"#"),s(),e("code",null,"authors")],-1),Ve=l(`<li><p>Type: <code>Array&lt;Author&gt;</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: A list of commit authors with their git signature and git platform username to generate Markdown links in changelogs.</p></li><li><p>Example:</p><div class="language-toml ext-toml"><pre class="language-toml"><code>  <span class="hljs-section">[changelog]</span>
  <span class="hljs-attr">authors</span> = [
    { signature = <span class="hljs-string">&quot;Paul Delafosse&quot;</span>, username = <span class="hljs-string">&quot;oknozor&quot;</span> },
    { signature = <span class="hljs-string">&quot;Jack Dorland&quot;</span>, username = <span class="hljs-string">&quot;jackdorland&quot;</span> },
    { signature = <span class="hljs-string">&quot;Mike Lubinets&quot;</span>, username = <span class="hljs-string">&quot;mersinvald&quot;</span> },
    { signature = <span class="hljs-string">&quot;Marcin Puc&quot;</span>, username = <span class="hljs-string">&quot;tranzystorek-io&quot;</span> },
    { signature = <span class="hljs-string">&quot;Renault Fernandes&quot;</span>, username = <span class="hljs-string">&quot;renaultfernandes&quot;</span> },
    { signature = <span class="hljs-string">&quot;Pieter Joost van de Sande&quot;</span>, username = <span class="hljs-string">&quot;pjvds&quot;</span> },
    { signature = <span class="hljs-string">&quot;orhun&quot;</span>, username = <span class="hljs-string">&quot;orhun&quot;</span> },
    { signature = <span class="hljs-string">&quot;Danny Tatom&quot;</span>, username = <span class="hljs-string">&quot;its-danny&quot;</span> },
]
</code></pre></div></li>`,4),Be=e("p",null,"Also see:",-1),Pe=s("User guide -> Changelog"),Ne=s("User guide -> Built-in templates"),He=l(`<h2 id="mono-repository-config" tabindex="-1"><a class="header-anchor" href="#mono-repository-config" aria-hidden="true">#</a> Mono-repository config</h2><h3 id="monorepo-version-separator" tabindex="-1"><a class="header-anchor" href="#monorepo-version-separator" aria-hidden="true">#</a> <code>monorepo_version_separator</code></h3><ul><li>Type: <code>String</code></li><li>Optional: <code>true</code></li><li>Description: set a package tag separator. For instance if you have a <code>-</code> as package separator, cocogitto will generate monorepo package version starting with the package name followed by the optional prefix and package version (ex: <code>my-package-v1.0.0</code>)</li><li>Example:<div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-attr">monorepo_version_separator</span> = <span class="hljs-string">&quot;-&quot;</span>
</code></pre></div></li></ul><h3 id="pre-package-bump-hooks" tabindex="-1"><a class="header-anchor" href="#pre-package-bump-hooks" aria-hidden="true">#</a> <code>pre_package_bump_hooks</code></h3><ul><li>Type: <code>Array&lt;String&gt;</code></li><li>Optional: <code>true</code></li><li>Description: an array of command executed before every package bump.</li><li>Example:<div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-attr">pre_bump_hooks</span> = [
    <span class="hljs-string">&quot;cargo build --release&quot;</span>,
    <span class="hljs-string">&quot;cargo fmt --all&quot;</span>,
    <span class="hljs-string">&quot;cargo set-version {{version}}&quot;</span>,
]
</code></pre></div></li></ul><h3 id="post-package-bump-hooks" tabindex="-1"><a class="header-anchor" href="#post-package-bump-hooks" aria-hidden="true">#</a> <code>post_package_bump_hooks</code></h3><ul><li>Type: <code>Array&lt;String&gt;</code></li><li>Optional: <code>true</code></li><li>Description: an array of command executed after every package bump.</li><li>Example:<div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-attr">pre_bump_hooks</span> = [
    <span class="hljs-string">&quot;cargo build --release&quot;</span>,
    <span class="hljs-string">&quot;cargo fmt --all&quot;</span>,
    <span class="hljs-string">&quot;cargo set-version {{version}}&quot;</span>,
]
</code></pre></div></li></ul><h2 id="mono-repository-packages" tabindex="-1"><a class="header-anchor" href="#mono-repository-packages" aria-hidden="true">#</a> Mono-repository packages</h2><h3 id="path-1" tabindex="-1"><a class="header-anchor" href="#path-1" aria-hidden="true">#</a> <code>path</code></h3><ul><li>Type: <code>String</code></li><li>Optional: <code>false</code></li><li>Description: set the package path.</li><li>Example:<div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-section">[packages]</span>
<span class="hljs-attr">my_package</span> = { path = <span class="hljs-string">&quot;packages/my_package&quot;</span> }
</code></pre></div></li></ul><h3 id="changelog-path" tabindex="-1"><a class="header-anchor" href="#changelog-path" aria-hidden="true">#</a> <code>changelog_path</code></h3><ul><li>Type: <code>String</code></li><li>Optional: <code>true</code></li><li>Default: <code>{path}/CHANGELOG.md</code></li><li>Description: overrides the default changelog path, allowing to set an absolute path.</li><li>Example:<div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-section">[packages]</span>
<span class="hljs-attr">my_package</span> = { path = <span class="hljs-string">&quot;packages/my_package&quot;</span>, changelog_path = <span class="hljs-string">&quot;changelogs/my_package.md&quot;</span> }
</code></pre></div></li></ul><h3 id="public-api" tabindex="-1"><a class="header-anchor" href="#public-api" aria-hidden="true">#</a> <code>public_api</code></h3>`,13),Me=l(`<li><p>Type: <code>boolean</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Default: <code>true</code></p></li><li><p>Description: if set to false package will not trigger global version bump.</p></li><li><p>Example:</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-section">[packages]</span>
<span class="hljs-attr">my_package</span> = { path = <span class="hljs-string">&quot;packages/my_package&quot;</span>, public_api = <span class="hljs-literal">false</span> }
</code></pre></div></li>`,5),Fe=e("p",null,"Also see:",-1),Ge=s("User guide -> Package configuration"),Re=e("h3",{id:"pre-bump-hooks-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pre-bump-hooks-1","aria-hidden":"true"},"#"),s(),e("code",null,"pre_bump_hooks")],-1),ze=l(`<li><p>Type: <code>Array&lt;String&gt;</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: an array of command to execute before a package bump.</p></li><li><p>Example:</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-attr">pre_bump_hooks</span> = [
    <span class="hljs-string">&quot;cargo build --release&quot;</span>,
    <span class="hljs-string">&quot;cargo fmt --all&quot;</span>,
    <span class="hljs-string">&quot;cargo set-version {{version}}&quot;</span>,
]
</code></pre></div></li>`,4),Je=e("p",null,"Also see:",-1),Ie=s("User guide -> Automatic Versioning"),Ke=s("User guide -> Automatic versioning for monorepo"),Qe=s("User guide -> Post-bump hooks"),We=s("User guide -> Version DSL"),Xe=e("h3",{id:"post-bump-hooks-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#post-bump-hooks-1","aria-hidden":"true"},"#"),s(),e("code",null,"post_bump_hooks")],-1),Ye=l(`<li><p>Type: <code>Array&lt;String&gt;</code></p></li><li><p>Optional: <code>true</code></p></li><li><p>Description: an array of command to execute after a version bump.</p></li><li><p>Example:</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-attr">post_bump_hooks</span> = [
    <span class="hljs-string">&quot;echo {{latest}} bumped to {{version}}&quot;</span>,
]
</code></pre></div></li>`,4),Ze=e("p",null,"Also see:",-1),$e=s("User guide -> Automatic Versioning"),es=s("User guide -> Automatic versioning for monorepo"),ss=s("User guide -> Post-bump hooks"),os=s("User guide -> Version DSL"),as=e("h3",{id:"bump-profiles-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#bump-profiles-1","aria-hidden":"true"},"#"),s(),e("code",null,"bump_profiles")],-1),ts=e("li",null,[s("Type: "),e("code",null,"Hashmap<String, BumpProfile>")],-1),ls=e("li",null,[s("Optional: "),e("code",null,"true")],-1),ns=s("Description: add additional per package "),is=s("pre-bump"),ps=s(" and "),cs=s("post-bump"),rs=s(" hooks profile. a profile can be used with the "),us=e("code",null,"cog bump --hook-profile <profile_name>",-1),ds=s(" flag."),hs=l(`<li>Example:<div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-section">[packages.my-package]</span>
<span class="hljs-attr">path</span> = <span class="hljs-string">&quot;packages/my-package&quot;</span>

<span class="hljs-section">[bump_profiles.hotfix]</span>
<span class="hljs-attr">pre_bump_hooks</span> = [
    <span class="hljs-string">&quot;cargo build --release&quot;</span>,
    <span class="hljs-string">&quot;cargo fmt --all&quot;</span>,
    <span class="hljs-string">&quot;cargo set-version {{version}}&quot;</span>,
]

<span class="hljs-attr">post_bump_hooks</span> = [
    <span class="hljs-string">&quot;cargo package&quot;</span>,
]
</code></pre></div></li>`,1);function gs(ms,_s){const o=n("RouterLink");return i(),p(c,null,[d,e("ul",null,[h,e("li",null,[g,e("p",null,[a(o,{to:"/guide/#tag-prefix"},{default:t(()=>[m]),_:1})])])]),_,e("ul",null,[f,e("li",null,[b,e("p",null,[a(o,{to:"/guide/#branch-whitelist"},{default:t(()=>[q]),_:1})])])]),j,e("ul",null,[k,e("li",null,[x,e("p",null,[a(o,{to:"/guide/#deal-with-merge-commit"},{default:t(()=>[v]),_:1})])])]),y,e("ul",null,[U,e("li",null,[w,e("p",null,[a(o,{to:"/guide/#custom-commit-types"},{default:t(()=>[A]),_:1})])])]),D,T,e("ul",null,[S,e("li",null,[E,e("ul",null,[e("li",null,[a(o,{to:"/guide/#auto-bump"},{default:t(()=>[O]),_:1})]),e("li",null,[a(o,{to:"/guide/#pre-bump-hooks"},{default:t(()=>[C]),_:1})]),e("li",null,[a(o,{to:"/guide/#version-dsl"},{default:t(()=>[L]),_:1})])])])]),V,e("ul",null,[B,e("li",null,[P,e("ul",null,[e("li",null,[a(o,{to:"/guide/#auto-bump"},{default:t(()=>[N]),_:1})]),e("li",null,[a(o,{to:"/guide/#post-bump-hooks"},{default:t(()=>[H]),_:1})]),e("li",null,[a(o,{to:"/guide/#version-dsl"},{default:t(()=>[M]),_:1})])])])]),F,e("ul",null,[G,R,e("li",null,[e("p",null,[z,a(o,{to:"/config/#pre_bump_hooks"},{default:t(()=>[J]),_:1}),I,a(o,{to:"/config/#post_bump_hooks"},{default:t(()=>[K]),_:1}),Q,W,X])]),Y,e("li",null,[Z,e("ul",null,[e("li",null,[a(o,{to:"/guide/#auto-bump"},{default:t(()=>[$]),_:1})]),e("li",null,[a(o,{to:"/guide/#post-bump-hooks"},{default:t(()=>[ee]),_:1})]),e("li",null,[a(o,{to:"/guide/#pre-bump-hooks"},{default:t(()=>[se]),_:1})]),e("li",null,[a(o,{to:"/guide/#version-dsl"},{default:t(()=>[oe]),_:1})]),e("li",null,[a(o,{to:"/guide/guide/#bump-profiles"},{default:t(()=>[ae]),_:1})])])])]),te,le,e("ul",null,[ne,e("li",null,[ie,e("ul",null,[e("li",null,[a(o,{to:"/guide/#auto-bump"},{default:t(()=>[pe]),_:1})]),e("li",null,[a(o,{to:"/guide/#changelogs"},{default:t(()=>[ce]),_:1})])])])]),re,e("ul",null,[ue,e("li",null,[de,e("ul",null,[e("li",null,[a(o,{to:"/guide/#changelogs"},{default:t(()=>[he]),_:1})]),e("li",null,[a(o,{to:"/guide/#buiLt-in-templates"},{default:t(()=>[ge]),_:1})]),e("li",null,[a(o,{to:"/guide/#custom-templates"},{default:t(()=>[me]),_:1})])])])]),_e,e("ul",null,[fe,e("li",null,[be,e("ul",null,[e("li",null,[a(o,{to:"/guide/#changelogs"},{default:t(()=>[qe]),_:1})]),e("li",null,[a(o,{to:"/guide/#buiLt-in-templates"},{default:t(()=>[je]),_:1})]),e("li",null,[a(o,{to:"/guide/#custom-templates"},{default:t(()=>[ke]),_:1})])])])]),xe,e("ul",null,[ve,e("li",null,[ye,e("ul",null,[e("li",null,[a(o,{to:"/guide/#changelogs"},{default:t(()=>[Ue]),_:1})]),e("li",null,[a(o,{to:"/guide/#buiLt-in-templates"},{default:t(()=>[we]),_:1})]),e("li",null,[a(o,{to:"/guide/#custom-templates"},{default:t(()=>[Ae]),_:1})])])])]),De,e("ul",null,[Te,e("li",null,[Se,e("ul",null,[e("li",null,[a(o,{to:"/guide/#changelogs"},{default:t(()=>[Ee]),_:1})]),e("li",null,[a(o,{to:"/guide/#buiLt-in-templates"},{default:t(()=>[Oe]),_:1})]),e("li",null,[a(o,{to:"/guide/#custom-templates"},{default:t(()=>[Ce]),_:1})])])])]),Le,e("ul",null,[Ve,e("li",null,[Be,e("ul",null,[e("li",null,[a(o,{to:"/guide/#changelogs"},{default:t(()=>[Pe]),_:1})]),e("li",null,[a(o,{to:"/guide/#buiLt-in-templates"},{default:t(()=>[Ne]),_:1})])])])]),He,e("ul",null,[Me,e("li",null,[Fe,e("p",null,[a(o,{to:"/guide/#packages-configuration"},{default:t(()=>[Ge]),_:1})])])]),Re,e("ul",null,[ze,e("li",null,[Je,e("ul",null,[e("li",null,[a(o,{to:"/guide/#auto-bump"},{default:t(()=>[Ie]),_:1})]),e("li",null,[a(o,{to:"/guide/#packages-hooks"},{default:t(()=>[Ke]),_:1})]),e("li",null,[a(o,{to:"/guide/#post-bump-hooks"},{default:t(()=>[Qe]),_:1})]),e("li",null,[a(o,{to:"/guide/#version-dsl"},{default:t(()=>[We]),_:1})])])])]),Xe,e("ul",null,[Ye,e("li",null,[Ze,e("ul",null,[e("li",null,[a(o,{to:"/guide/#auto-bump"},{default:t(()=>[$e]),_:1})]),e("li",null,[a(o,{to:"/guide/#packages-hooks"},{default:t(()=>[es]),_:1})]),e("li",null,[a(o,{to:"/guide/#post-bump-hooks"},{default:t(()=>[ss]),_:1})]),e("li",null,[a(o,{to:"/guide/#version-dsl"},{default:t(()=>[os]),_:1})])])])]),as,e("ul",null,[ts,ls,e("li",null,[ns,a(o,{to:"/config/#pre_bump_hooks"},{default:t(()=>[is]),_:1}),ps,a(o,{to:"/config/#post_bump_hooks"},{default:t(()=>[cs]),_:1}),rs,us,ds]),hs])],64)}var qs=r(u,[["render",gs]]);export{qs as default};
